import sys
from src.logger import logging

def error_message_detail(error,error_detail:sys): 
    """
    This function is used to get the error message with the file name and line number where the error occurred.

    Args: 
        error: error message
        error_detail: sys.exc_info() object
        
    Returns:
        error_message: error message with file name and line number
        
    """
    # sys.exc_info() returns a tuple of three values: (type, value, traceback).
    # exc_tb (traceback object) contains information about where the error occurred.
    _,_,exc_tb=error_detail.exc_info() 

    # Retrieve the file name where the error occurred.
    # exc_tb.tb_frame: The frame where the error occurred.
    # f_code.co_filename: The file name associated with the code in the frame.
    file_name=exc_tb.tb_frame.f_code.co_filename 

    # Construct the detailed error message and return it
    error_message = "Error occuered in file: "+file_name+" at line number: "+str(exc_tb.tb_lineno)+" with error message: "+str(error)
    return error_message

# Create a custom exception class that extends Python's built-in Exception class.
class CustomException(Exception):

    # error_message: The original error message.
    # error_detail: The sys.exc_info() object containing error details.
    # super().__init__(error_message): Calls the constructor of the parent Exception class.
    # self.error_message: Stores the detailed error message generated by error_message_detail.
    def __init__(self,error_message,error_detail:sys):
        super().__init__(error_message)
        self.error_message=error_message_detail(error_message,error_detail)

        #  Override the __str__ method to return the detailed error message when the exception is printed or converted to a string.
        def __str__(self):
            return self.error_message